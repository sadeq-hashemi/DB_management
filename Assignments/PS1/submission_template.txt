<?xml version="1.0"?>
<pset>

    <!--
        CS 564, SPRING 2018
        PROBLEM SET 1 SUBMISSION TEMPLATE

        Please copy and paste your SQL queries into the appropriate spots below. 

        When submitting SQL queries, please do not include the initial 
        %sql or %%sql IPython commands. Just include the SQL code.

        DO NOT DELETE THE <![CDATA[ ... ]]> LINES IN EACH <answer> TAG!
        Doing so will break the autograder. To avoid accidentally breaking
        something, please leave all existing comments in this template
        intact in your submission.
    -->

    <student>
        <name>
            <!-- Insert your full name on the line below. -->
            Sadeq Hashemi Nejad
        </name>
        <netid>
            <!-- Insert your NetID (NOT your student ID number!) below. -->
            hasheminejad
        </netid>
        <studentid>
            <!-- Insert your student ID number below. -->
            9073576911
        </studentid>
    </student>


    <!-- BEGIN PROBLEM 1 -->
    <answer number="1a">
        <!-- Paste your solution to problem 1, part (a) below this line. -->
        <![CDATA[

        %sql SELECT j AS i, i AS j, group_concat(val, " , ") AS "A^T" FROM A GROUP BY j, i;

        ]]><!-- End problem 1, part (a). -->
    </answer>
    <answer number="1b">
        <!-- Paste your solution to problem 1, part (b) below this line. --><![CDATA[

%%sql SELECT SUM(A.val * B.val) AS "SUM(A.val * B.val)"
FROM A INNER JOIN B
ON A.i = B.i
WHERE A.j = 1 AND B.j = 2; 

        ]]><!-- End problem 1, part (b). -->
    </answer>
    <answer number="1c">
        <!-- Paste your solution to problem 1, part (c) below this line. --><![CDATA[

%%sql SELECT SUM(A.val * B.val) AS "SUM(A.val * B.val)"
FROM A INNER JOIN B
ON A.j = B.i
WHERE A.i = 1 AND B.j = 2;

        ]]><!-- End problem 1, part (c). -->
    </answer>
    <answer number="1d">
        <!-- Paste your solution to problem 1, part (d) below this line. --><![CDATA[

%%sql SELECT A.i, B.j, SUM(A.val * B.val) AS "val"
FROM A INNER JOIN B
ON A.j = B.i
GROUP BY A.i, B.j;

        ]]><!-- End problem 1, part (d). -->
    </answer>
    <!-- END PROBLEM 1 -->


    <!-- BEGIN PROBLEM 2 -->
    <answer number="2a">
        <!-- Paste your solution to problem 2, part (a) below this line. --><![CDATA[

%%sql WITH total AS (SELECT Sales.Store as Store, SUM(Sales.WeeklySales) as AllSales
FROM Sales, Holidays
ON Sales.WeekDate = Holidays.WeekDate
WHERE Holidays.IsHoliday='TRUE'
GROUP BY Sales.Store
ORDER BY Sales.Store)
SELECT Store, max(AllSales) FROM total
UNION
SELECT Store, min(AllSales) FROM total

        ]]><!-- End problem 2, part (a). -->
    </answer>
    <answer number="2b">
        <!-- Paste your solution to problem 2, part (b) below this line. --><![CDATA[

%%sql WITH holidaySales AS (SELECT Sales.WeekDate as Date, SUM(Sales.WeeklySales) as AllSales
FROM Sales, Holidays
ON Sales.WeekDate = Holidays.WeekDate
WHERE Holidays.IsHoliday='TRUE'
GROUP BY Sales.WeekDate
ORDER BY Sales.WeekDate),

nonholidaySales AS (SELECT Sales.WeekDate as Date, SUM(Sales.WeeklySales) as AllSales
FROM Sales, Holidays
ON Sales.WeekDate = Holidays.WeekDate
WHERE Holidays.IsHoliday='FALSE'
GROUP BY Sales.WeekDate
ORDER BY Sales.Store), 

result AS (
    SELECT nonholidaySales.Date as date, nonholidaySales.AllSales as sales
    FROM holidaySales, nonholidaySales
    GROUP BY nonholidaySales.Date
    HAVING sales > AVG(holidaySales.AllSales)
)

SELECT COUNT(date) as NumNonHolidays from result;


        ]]><!-- End problem 2, part (b). -->
    </answer>
    <answer number="2c">
        <!-- Paste your solution to problem 2, part (c) below this line. --><![CDATA[

%%sql SELECT Stores.type, SUBSTR(Sales.WeekDate, 6, 2) AS month, SUM(Sales.WeeklySales)
FROM Sales, Stores
ON Sales.Store = Stores.Store
GROUP BY Stores.type, month;

        ]]><!-- End problem 2, part (c). -->
    </answer>
    <answer number="2d">
        <!-- Paste your solution to problem 2, part (d) below this line. --><![CDATA[

%%sql
DROP TABLE IF EXISTS relation;
DROP VIEW IF EXISTS temp;
CREATE TABLE relation(AttributeName VARCHAR(20), CorrelationSign Integer);

CREATE VIEW temp AS 
WITH avgTemp AS 
    (SELECT AVG(TemporalData.temperature) as temp FROM TemporalData),
avgFuel AS 
   (SELECT AVG(TemporalData.fuelprice) as fuel FROM TemporalData),
avgCPI AS 
    (SELECT AVG(TemporalData.cpi) as cpi FROM TemporalData),
avgUnemploy AS 
    (SELECT AVG(TemporalData.unemploymentrate) as unemploy FROM TemporalData),
avgSales AS 
    (SELECT AVG(Sales.WeeklySales) as sale FROM Sales),
diff AS 
    (SELECT TemporalData.temperature - avgTemp.temp as diffTemp, 
        TemporalData.fuelprice - avgFuel.fuel as diffFuel,
        TemporalData.cpi - avgCPI.cpi as diffCPI, 
        TemporalData.unemploymentrate - avgUnemploy.unemploy as diffUnemploy, 
        Sales.WeeklySales - avgSales.sale as diffSale
     FROM avgSales, avgUnemploy, avgCPI, avgFuel, avgTemp, TemporalData, Sales
     WHERE TemporalData.weekdate = Sales.weekdate AND TemporalData.store = Sales.store ), 
product AS 
    ( SELECT diffTemp*diffSale as prodTemp,
            diffFuel*diffSale as prodFuel,
            diffCPI*diffSale as prodCPI,
            diffUnemploy*diffSale as prodUnemploy    
     FROM diff
    ),
summ AS (
    SELECT SUM(prodTemp) as sumTemp, SUM(prodFuel) as sumFuel, SUM(prodCPI) as sumCPI, SUM(prodUnemploy) as sumUnemploy
    FROM product
), 
sign AS (
    SELECT sumTemp/abs(sumTemp) as signTemp,
    sumFuel/abs(sumFuel) as signFuel,
    sumCPI/abs(sumCPI) as signCPI,
    sumUnemploy/abs(sumUnemploy) as signUnemploy 
    FROM summ
) 
SELECT * from sign;

INSERT INTO relation (AttributeName, CorrelationSign) Values ('Temperature', (SELECT signTemp from temp));
INSERT INTO relation (AttributeName, CorrelationSign) Values ('FuelPrice', (SELECT signFuel from temp));
INSERT INTO relation (AttributeName, CorrelationSign) Values ('CPI', (SELECT signCPI from temp));
INSERT INTO relation (AttributeName, CorrelationSign) Values ('UnemploymentRate', (SELECT signUnemploy from temp));


SELECT * from relation;


        ]]><!-- End problem 2, part (d). -->
    </answer>
    %%sql CREATE TABLE relation(
AttributeName VARCHAR(20), CorrelationSign Integer)

WITH temp AS(SELECT TemporalData.temperature as temp,
              TemporalData.fuelprice as fuel,
              TemporalData.cpi as cpi, 
              TemporalData.unemploymentrate as unemploy,
              Sales.WeeklySales as sales 
              FROM TemporalData, Sales)
SELECT * from relation

    <!-- END PROBLEM 2 -->


    <!-- BEGIN PROBLEM 3 -->
    <answer number="3a">
        <!-- Paste your solution to problem 3, part (a) below this line. --><![CDATA[

%%sql 
DROP VIEW IF EXISTS st1;
DROP VIEW IF EXISTS st2;
DROP VIEW IF EXISTS st3;

CREATE VIEW st1 AS
    SELECT direction, A, B, d  
    FROM streets
    WHERE direction = 'F' AND A = 'UW-Madison';
CREATE VIEW st2 AS  
    SELECT streets.direction as direction2, streets.B as B2, st1.d + streets.d as d2  
    FROM streets, st1
    ON st1.B = streets.A
    WHERE direction2 = 'F';
CREATE VIEW st3 AS 
    SELECT streets.direction as direction3, streets.B as B3, st2.d2 + streets.d as d3  
    FROM streets, st2
    ON st2.B2 = streets.A
    WHERE direction3 = 'F';


SELECT B3 as B, d3 as d FROM (st3) where d3 <= 10 GROUP BY B
UNION 
SELECT B2 as B, d2 as d FROM st2 where d2 <= 10 GROUP BY B
UNION 
SELECT B , d FROM (st1) where d <= 10 GROUP BY B;

        ]]><!-- End problem 3, part (a). -->
    </answer>
    <answer number="3b">
        <!-- Paste your solution to problem 3, part (b) below this line. --><![CDATA[

%%sql 
DROP VIEW IF EXISTS p1;
DROP VIEW IF EXISTS p2;
DROP VIEW IF EXISTS p3;


CREATE VIEW p1 AS
        SELECT s1.A, s1.B, s1.d as d 
        FROM streets s1
        WHERE s1.A = 'UW-Madison'
    UNION
        SELECT s1.A, s2.B, s1.d + s2.d as d 
        FROM streets s1
        JOIN streets s2 ON s1.B = s2.A AND s2.B != s1.A
        WHERE s1.A = 'UW-Madison'
    UNION
        SELECT s1.A, s3.B, s1.d + s2.d + s3.d  as d 
        FROM streets s1
        JOIN streets s2 ON s1.B = s2.A AND s2.B != s1.A
        JOIN streets s3 ON s2.B = s3.A AND s3.B != s2.A AND s3.B != s1.A
        WHERE s1.A = 'UW-Madison';
        

SELECT compA.B as A, compB.B as B, compA.d + compB.d as d
FROM p1 as compA JOIN p1 as compB ON compA.B <> compB.B
where compA.d + compB.d <= 15;

        ]]><!-- End problem 3, part (b). -->
    </answer>
    <answer number="3c">
        <!-- Paste your solution to problem 3, part (c) below this line. --><![CDATA[

%%sql
WITH  
p3 AS (
    SELECT streets.id, streets.A, streets.B
    FROM streets, streets as p1, streets as p2
    WHERE streets.B = p1.A
        AND p1.B != streets.A
        AND p1.B = p2.A
        AND p2.B = streets.A
    LIMIT 1
    )
DELETE from Streets
WHERE streets.id = (Select p3.id from p3);

        ]]><!-- End problem 3, part (c). -->
    </answer>
    <answer number="3d">
        <!-- Paste your solution to problem 3, part (d) below this line. --><![CDATA[

%%sql
WITH RECURSIVE
    path(start, last, curr, d) AS (
        SELECT A, A, B, d FROM streets
        UNION
        SELECT p.start, p.curr, s.B, p.d + s.d
        FROM path p JOIN streets S
        ON p.curr = s.A
        WHERE p.last != s.B
    )
SELECT start as A, curr as B, MAX(d) as distance FROM path;

        ]]><!-- End problem 3, part (d). -->
    </answer>
    <!-- END PROBLEM 3 -->


</pset>
